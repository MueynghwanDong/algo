비선형(그래프 영역)
- 저장 : 인접 행렬, 인접 리스트 -> 기본적으로 인접행렬, 메모리를 많이 차지	 
- 순회 : DFS / BFS
BFS -  깊이는 알고 있지만 경로를 알수 없는 경우
DFS - 깊이를 잘 모를 경우, 경로를 알 수 있는 경우 
-> DFS를 우선적으로 사용하도록...

재귀 함수 - 구조를 원하는 방향으로 조정이 가능하다. 구현하기가 좋다. 가치지기에 유리하다.

그래프 (V- 정점 E- 간선)
- 최대 간선의 개수 V(V-1)/2

서로소 집합(상호배타집합)
- 표현 방법 : 연결리스트, 트리
- 상호배타집합 연산 : make-set(x) / find-set(x) / union(x,y)

트리 - 부모가 자기자신인 경우 대표자.. or -1 인경우 
   - union시 대표자가 하나의 대표자를 가리키면서 대표자를 하나로 만들어 줌

문제점 : 부모를 찾거나 자식을 찾을 때 깊이가 길경우 많은 연산이 필요하다..
=> 최상위 대표자를 대표자로 기억하기...
연산 효율 높이는 방법
Rank를 이용한 union
- 각 노드는 자신을 루트로 하는 서브트리의 높이를 rank라는 이름으로 저장
- 두 집합을 합칠 때 rank가 낮은 집합을 rank가 높은 집합에 붙임.
( 반대로 하면 깊이가 더 깊어질 수 있다. 가능한 깊이가 길어지지 않는 방법으로 해주기 , 깊이가 같을 경우 깊이가 높아질 수 밖에 없음)
Path compression : find-set을 수행하는 과정에서 만나는 모든 노드들이 직접 root 를 가리키도록 함.

make_set(x) : x를 포함하는 새로운 집합 생성
public static void make_set(int x) {
		p[x] = x; // 부모가 자기자신이면 대표자 or 부모가 -1이면 대표자
		rank[x] = 0; // 초기값 0임
	}
find_set(x) : x 포함 하는 집합을 찾는 연산
public static int find_set(int x) {
		if (p[x] == x) {
			return x;
		} else {
			p[x] = find_set(p[x]); // path compression
			return p[x];
		}
	}
-> 특정 노드에서 루트까지 경로를 찾아가면서 노드 부모 정보 까지 갱신한다.
public static void union(int x, int y) {
		int px = find_set(x); // 대표자 구해옴
		int py = find_set(y);
		// 서로 다른 집합일 경우만 합쳐야함. 같은 집합인데 합치면 stackoverflow 발생
		if (px != py) {
			Link(px, py);
		}
	}

	public static void Link(int px, int py) {
		if (rank[px] > rank[py])
			p[py] = px; // 작은 쪽을 큰 쪽에 붙인다. 
		else {
			p[px] = py;
			if (rank[px] == rank[py])
				rank[py]++;
		}
	}
신장 트리
- n개 정점으로 이루어진 무향 그래프에서 n개 정점과 n-1개 간선으로 이루어진 트리
최소 신장 트리 (사이클 no)
- 무향 가중치 그래프에서 신장 트리를 구성하는 간선들의 가중치의 합이 최소인 신장 트리

인덱스 0  1  2  3  4  5  6
부모    0  2  0  4  2  3  2
가중치 0 21 31 34 46 18 25 

Prim 알고리즘 (disjoint 를 써도 되고 안써도 됨)
- 하나의 정점에서 연결된 간선들 중 하나씩 선택하며 만들어 가는 방식
- 임의 정점에서 시작 
- 인접 정점 중 최소 비용의 간선이 존재하는 정점 선택 -> 모든 정점 선택될 때 까지

KRUSKAL 알고리즘
- 간선에 따라 오름차순에 따라 정렬
- 가중치 낮은 간선 부터 선택
- N-1개의 간선이 선택 될 때 까지 반복 수행
- disjointset으로 같은 그룹으로 묶어 시간을 줄일 수 있다. 

최단 경로
- 간선의 가중치가 있는 그래프에서 두 정점 사이 경로 중 간선의 가중치 합이 최소 인 경우
하나의 시작 정점에서 끝 정점까지 최단 경로 
- 다익스트라 알고리즘 (음의 가중치 허용 안함)
- 벨만-포드 알고리즘 (음의 가중치 허용)
모든 정점들에 대한 최단 경로 
- 플로이드 - 워샬 알고리즘
